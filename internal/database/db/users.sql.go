// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (login, password)
VALUES ($1, $2)
RETURNING id, login, password
`

type CreateUserParams struct {
	Login    string
	Password string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Login, arg.Password)
	var i User
	err := row.Scan(&i.ID, &i.Login, &i.Password)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, login, password FROM users
WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(&i.ID, &i.Login, &i.Password)
	return i, err
}

const getUserByLogin = `-- name: GetUserByLogin :one
SELECT id, login, password FROM users
WHERE login = $1
`

func (q *Queries) GetUserByLogin(ctx context.Context, login string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByLogin, login)
	var i User
	err := row.Scan(&i.ID, &i.Login, &i.Password)
	return i, err
}
